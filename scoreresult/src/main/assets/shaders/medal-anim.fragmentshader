#version 320 es

precision highp float;

layout(binding = 0) uniform sampler2D texLoc;
layout(binding = 1) uniform sampler2D texLoc2;

layout(binding = 1) uniform FragInfo {
    float time;
} info;

in vec2 texCoord;

out vec4 FragColor;

const int MEDAL_DURATION_1 = int(4000.0 * ( 34.0 -  0.0 - 33.0) / 120.0);
const int MEDAL_DURATION_2 = int(4000.0 * ( 47.0 - 34.0 ) / 120.0);
const int MEDAL_DURATION_3 = int(4000.0 * ( 54.0 - 47.0 ) / 120.0);
const int MEDAL_DURATION_4 = int(4000.0 * ( 66.0 - 54.0 ) / 120.0);
const int MEDAL_DURATION_5 = int(4000.0 * (120.0 - 66.0 + 33.0) / 120.0);

const float PI = 3.14159265359;

void main() {
    float time = info.time;

    int duration1 = MEDAL_DURATION_1;
    int duration2 = MEDAL_DURATION_2;
    int duration3 = MEDAL_DURATION_3;
    int duration4 = MEDAL_DURATION_4;
    int duration5 = MEDAL_DURATION_5;

    float direction = 1.0;
    int uperiod = duration2*2;
    int timems = int(info.time * 1000.0f);

    int phaseStart[6];

    phaseStart[0] = 0;
    phaseStart[1] = duration1;
    phaseStart[2] = phaseStart[1] + duration2;
    phaseStart[3] = phaseStart[2] + duration3;
    phaseStart[4] = phaseStart[3] + duration4;
    phaseStart[5] = phaseStart[4] + duration5;

    int totalTimems = duration1 + duration2 + duration3 + duration4 + duration5;
    timems %= totalTimems;

    FragColor = texture(texLoc, texCoord);

    if( phaseStart[0] <= timems && timems < phaseStart[1] ){
        FragColor = texture(texLoc2, texCoord);
    }
    else if( phaseStart[1] <= timems && timems < phaseStart[2] ){
        timems = (timems - phaseStart[1]);
        timems %= uperiod;
        float time2 = float(timems) / float(uperiod);
        float rad2 = PI * 2.0f * time2 * direction;

        if(0.0f <= abs(rad2) && abs(rad2) < PI / 2.0f ){
            FragColor = texture(texLoc2, texCoord);
        }
        else if(PI/2.0f <= abs(rad2) && abs(rad2) < PI ){
        }
        else if(PI <= abs(rad2) && abs(rad2) < PI * 2.0f * 3.0f / 4.0f ){
        }
        else if(PI * 2.0f * 3.0f / 4.0f <= abs(rad2) && abs(rad2) < PI * 2.0f ){
            FragColor = texture(texLoc2, texCoord);
        }
    }
    else if( phaseStart[2] <= timems && timems < phaseStart[3] ){

    }
    else if( phaseStart[3] <= timems && timems < phaseStart[4] ){

    }
    else if( phaseStart[4] <= timems && timems < phaseStart[5] ){

    }
    //FragColor = texture(texLoc, texCoord);
    //FragColor = vec4(1.0f,0.0f,0.0f,1.0f);//texture(texLoc, texCoord);
}
